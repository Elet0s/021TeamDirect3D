Directx11 랜더링 파이프라인 설명

// 그린다라는 함수는 분명히 있다. 
// 우리구조에서는 백버퍼에 찍힐겁니다.
// 그 백버퍼에 찍힐때의 그리기 
// 위한 옵션들을 의미합니다.
// 그러기 위한 핵심적인 공통사항들이 있는데.

0. 모니터는 그런 픽셀(화소)의 집합입니다.
   이미지? 픽셀의 집합니다.
   다다다다다다. 2차원 배열.

   // 
   프로그래머블 : 내가 코딩에 준하는 간섭을 할수 있는 단계.
   고정기능단계 : 고정기능단계는 내가 그에 대해서 옵션만 변경할수 있는 단계

struct MyVertex 
{
	int Index;
	float4 Pos;
}

1. 인풋어셈블러1 : 고정기능단계

   1-1. 점의 구조
   점 자체를 넣어주기 전에.
   그래픽카드는 모르고 있는 => 포지션 + (내마음대로인 데이터)
   인풋 레이아웃이라는것으로 압니다.
   점 그자체의 바이트 구조를 알려주는것.

   1. 0~4바이트까지는 점의 순서야.
   2. 4~20바이트까지는 포지션 xyzw야

   1-2. 점의 데이터
   80바이트를 넣어주 D3d11Vertexbuffer* 를이용해서
   그래픽카드에 넣어줄수가 있다.

struct OutPut 
{
	int Index;
	float4 Pos;
}

2. 버텍스쉐이더 : 프로그래머블
   우리가 만들었던 행렬이 들어갑니다.
   함수를 만들어서 점 하나하나마다 그 함수를 돌려줄수가 있습니다.

   ???? 몇번? 4번 들어오나.
   OutPut MyVertexShader(MyVertex& _Input) 
   {
		OutPut NewOutPut;
		NewOutPut.Pos = _Input.Pos * 월드 * 뷰 * 프로젝션;
		return NewOutPut;
   }

3. 인풋어셈블러2 : 고정기능단계

   3-1. 삼각형으로 그릴래 점으로 그릴래 선으로 그릴까?
   D3D11_PRIMITIVE_TOPOLOGY 를 통해서 세팅해주면

   3-2. indexbuffer를 통해서 그걸 이 순서로 그려줘라는 데이터를 넣어줍니다.
   D3D11_PRIMITIVE_TOPOLOGY 를 통해서 세팅해주면

4. hull 쉐이더 => 무시

5. 테셀레이션 고정기능단계 => 무시

6. 도메인 쉐이더 무시 

7. 지오메트리 쉐이더 무시 

8. 래스터라이저 : 고정기능단계

   거꾸로 그리지 않기
   나간 픽셀은 무시하기
   z값으로 xyz나누기
   뷰포트 행렬 곱하기
   ... 다해놓고 
   그래서 이 픽셀들이 영향을 받아야 해요.

9. 픽셀쉐이더 : 프로그래머블단계

   의미
   float4
   Color MyPixelShader(OutPut& _Input) 
   float4 MyPixelShader(OutPut& _Input) 
   {
		// return 빨간색;
		return float4{1.0f, 0.0f, 0.0f, 1.0f};
   }

10. 아웃풋머저

    깊이는 나중에 설명

    랜더타겟 까지 해서 