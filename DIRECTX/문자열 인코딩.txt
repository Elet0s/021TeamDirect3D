0. 문자열의 표현방식은 바뀐이 없다.
   0번 => a
   특정 비트 배열과 문자하나를 매칭시키는 것.
   00000000 => a
   00000001 => b
   글자 1개를 표현하기 위해서는 언제나 1개의 
   메모리가 필요하다.

1. 아스키 => 초기형 문자열 인코딩 1바이트 
             몇개의 특수문자 와 숫자 알파벳을 1바이트안에 담은것
             초기형 프로그래밍은 아스키만으로도 충분했다.

2. 멀티바이트 => 다국적 언어는 글자수가 255자가 될수가 없다.
   어떤 글자들은 2바이트로 표현했다.
   + 1바이트와 2바이트의 혼용

3. 유니코드 => 영어건 뭐건 2바이트로 표현하자.
   => 온리 2바이트

* 문제가 생겼어 한 프로그램에서 
  아랍어와 한국어를 같이 쓰고 싶다.
  비주얼 스튜디오는 기본적으로 유니코드혹은 
  멀티바이트를 사용합니다. 문자열 국가코드 때문에

4. 그냥 1~3 1~4바이트로 표현하면 
   아예 그냥 3바이트로하자 그냥 4바이트로 하자.
   UTF-8
   UTF-16
   글로벌한 문자열 처리를 지원해야하는 라이브러리들은 겉으로 보기에는
   char*를 달라고 하지만 그건 utf-8을 달라고 하는 경우가 있으므로
   여러분들은 혹시라도 자신이 라이브러리를 받았다면 경로를 제대로 넣었는데 왜 안되지?
   언제나 문자열 인코딩도 한번 생각해야 한다.